import os
import logging
import sqlite3
import json
import asyncio
import threading
import time
import requests
import io
import re
import random
from datetime import datetime, timedelta
from flask import Flask, jsonify, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '362423055'))
    DATABASE_URL = os.getenv('DATABASE_URL', 'nutrition_bot.db')
    PORT = int(os.getenv('PORT', '10000'))
    WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://pravilnoepitanie.onrender.com')
    RENDER = os.getenv('RENDER', 'true').lower() == 'true'
    YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
    YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
    
    @classmethod
    def validate(cls):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        if not cls.BOT_TOKEN:
            raise ValueError("‚ùå BOT_TOKEN is required")
        logger.info("‚úÖ Configuration validated successfully")

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(Config.DATABASE_URL, check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS nutrition_plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            plan_data TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ Database initialized successfully")

class DatabaseManager:
    @staticmethod
    def get_connection():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(Config.DATABASE_URL, check_same_thread=False)
        conn.row_factory = sqlite3.Row
        return conn

def save_user(user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = DatabaseManager.get_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_data['user_id'], user_data['username'], user_data['first_name'], user_data['last_name']))
        conn.commit()
        logger.info(f"‚úÖ User saved: {user_data['user_id']}")
    except Exception as e:
        logger.error(f"‚ùå Error saving user: {e}")
    finally:
        conn.close()

def is_admin(user_id):
    return user_id == Config.ADMIN_USER_ID

def save_plan(user_id, plan_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –ë–î"""
    conn = DatabaseManager.get_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute('INSERT INTO nutrition_plans (user_id, plan_data) VALUES (?, ?)', 
                      (user_id, json.dumps(plan_data, ensure_ascii=False)))
        plan_id = cursor.lastrowid
        conn.commit()
        logger.info(f"‚úÖ Plan saved for user: {user_id}, plan_id: {plan_id}")
        return plan_id
    except Exception as e:
        logger.error(f"‚ùå Error saving plan: {e}")
        return None
    finally:
        conn.close()

def get_latest_plan(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = DatabaseManager.get_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT id, plan_data FROM nutrition_plans 
            WHERE user_id = ? ORDER BY created_at DESC LIMIT 1
        ''', (user_id,))
        result = cursor.fetchone()
        if result:
            return {
                'id': result['id'],
                'data': json.loads(result['plan_data'])
            }
        return None
    except Exception as e:
        logger.error(f"‚ùå Error getting latest plan: {e}")
        return None
    finally:
        conn.close()

# ==================== –ì–ï–ù–ï–†–ê–¢–û–† –ü–õ–ê–ù–û–í ====================

class EnhancedPlanGenerator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è"""
    
    @staticmethod
    def generate_plan_with_progress_indicator(user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –ø–ª–∞–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏"""
        logger.info(f"üéØ Generating enhanced plan for user {user_data['user_id']}")
        
        plan = {
            'user_data': user_data,
            'days': [],
            'shopping_list': {},
            'water_regime': {
                'total': '2.0 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å',
                'schedule': [
                    {'time': '7:00', 'amount': '200 –º–ª', 'description': '–°—Ç–∞–∫–∞–Ω —Ç–µ–ø–ª–æ–π –≤–æ–¥—ã –Ω–∞—Ç–æ—â–∞–∫'},
                    {'time': '8:00', 'amount': '200 –º–ª', 'description': '–ü–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞'},
                    {'time': '10:00', 'amount': '200 –º–ª', 'description': '–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è'},
                    {'time': '11:00', 'amount': '200 –º–ª', 'description': '–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫—É—Å–∞'},
                    {'time': '13:00', 'amount': '200 –º–ª', 'description': '–ü–æ—Å–ª–µ –æ–±–µ–¥–∞'},
                    {'time': '15:00', 'amount': '200 –º–ª', 'description': '–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è'},
                    {'time': '16:00', 'amount': '200 –º–ª', 'description': '–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫—É—Å–∞'},
                    {'time': '18:00', 'amount': '200 –º–ª', 'description': '–ü–µ—Ä–µ–¥ —É–∂–∏–Ω–æ–º'},
                    {'time': '19:00', 'amount': '200 –º–ª', 'description': '–ü–æ—Å–ª–µ —É–∂–∏–Ω–∞'},
                    {'time': '21:00', 'amount': '200 –º–ª', 'description': '–ü–µ—Ä–µ–¥ —Å–Ω–æ–º'}
                ]
            },
            'professor_advice': '–°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!',
            'created_at': datetime.now().isoformat(),
            'source': 'enhanced_generator'
        }
        
        # –°–æ–∑–¥–∞–µ–º 7 –¥–Ω–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
        day_names = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        
        for i, day_name in enumerate(day_names):
            day = {
                'name': day_name,
                'meals': [
                    {
                        'type': '–ó–ê–í–¢–†–ê–ö',
                        'name': f'–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏ {i+1}',
                        'time': '8:00',
                        'calories': '350 –∫–∫–∞–ª',
                        'protein': '15–≥',
                        'fat': '10–≥',
                        'carbs': '55–≥',
                        'ingredients': [
                            {'name': '–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', 'quantity': '60–≥'},
                            {'name': '–ú–æ–ª–æ–∫–æ', 'quantity': '200–º–ª'},
                            {'name': '–ë–∞–Ω–∞–Ω', 'quantity': '1—à—Ç'},
                            {'name': '–ú–µ–¥', 'quantity': '15–≥'}
                        ],
                        'recipe': '1. –î–æ–≤–µ–¥–∏—Ç–µ –º–æ–ª–æ–∫–æ –¥–æ –∫–∏–ø–µ–Ω–∏—è\n2. –î–æ–±–∞–≤—å—Ç–µ –æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è\n3. –í–∞—Ä–∏—Ç–µ 7 –º–∏–Ω—É—Ç\n4. –î–æ–±–∞–≤—å—Ç–µ –±–∞–Ω–∞–Ω –∏ –º–µ–¥'
                    },
                    {
                        'type': '–ü–ï–†–ï–ö–£–° 1',
                        'name': f'–ô–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏ {i+1}',
                        'time': '11:00',
                        'calories': '250 –∫–∫–∞–ª',
                        'protein': '12–≥',
                        'fat': '10–≥',
                        'carbs': '30–≥',
                        'ingredients': [
                            {'name': '–ô–æ–≥—É—Ä—Ç –≥—Ä–µ—á–µ—Å–∫–∏–π', 'quantity': '150–≥'},
                            {'name': '–ú–∏–Ω–¥–∞–ª—å', 'quantity': '20–≥'},
                            {'name': '–Ø–≥–æ–¥—ã', 'quantity': '100–≥'}
                        ],
                        'recipe': '1. –°–º–µ—à–∞–π—Ç–µ –π–æ–≥—É—Ä—Ç —Å —è–≥–æ–¥–∞–º–∏\n2. –ü–æ—Å—ã–ø—å—Ç–µ –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–º –º–∏–Ω–¥–∞–ª–µ–º'
                    },
                    {
                        'type': '–û–ë–ï–î',
                        'name': f'–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π {i+1}',
                        'time': '13:00',
                        'calories': '450 –∫–∫–∞–ª',
                        'protein': '40–≥',
                        'fat': '12–≥',
                        'carbs': '45–≥',
                        'ingredients': [
                            {'name': '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞', 'quantity': '150–≥'},
                            {'name': '–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞', 'quantity': '100–≥'},
                            {'name': '–û–≤–æ—â–∏', 'quantity': '200–≥'}
                        ],
                        'recipe': '1. –û—Ç–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–∫—É\n2. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É –Ω–∞ –ø–∞—Ä—É\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –æ–≤–æ—â–∞–º–∏'
                    },
                    {
                        'type': '–ü–ï–†–ï–ö–£–° 2',
                        'name': f'–¢–≤–æ—Ä–æ–≥ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏ {i+1}',
                        'time': '16:00',
                        'calories': '200 –∫–∫–∞–ª',
                        'protein': '20–≥',
                        'fat': '5–≥',
                        'carbs': '15–≥',
                        'ingredients': [
                            {'name': '–¢–≤–æ—Ä–æ–≥', 'quantity': '150–≥'},
                            {'name': '–ü–µ—Ä—Å–∏–∫', 'quantity': '1—à—Ç'},
                            {'name': '–ú–µ–¥', 'quantity': '10–≥'}
                        ],
                        'recipe': '1. –°–º–µ—à–∞–π—Ç–µ —Ç–≤–æ—Ä–æ–≥ —Å –ø–µ—Ä—Å–∏–∫–æ–º\n2. –î–æ–±–∞–≤—å—Ç–µ –º–µ–¥'
                    },
                    {
                        'type': '–£–ñ–ò–ù',
                        'name': f'–†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏ {i+1}',
                        'time': '19:00',
                        'calories': '350 –∫–∫–∞–ª',
                        'protein': '30–≥',
                        'fat': '15–≥',
                        'carbs': '20–≥',
                        'ingredients': [
                            {'name': '–§–∏–ª–µ —Ä—ã–±—ã', 'quantity': '200–≥'},
                            {'name': '–û–≤–æ—â–∏ –Ω–∞ –ø–∞—Ä—É', 'quantity': '300–≥'},
                            {'name': '–õ–∏–º–æ–Ω', 'quantity': '0.5—à—Ç'}
                        ],
                        'recipe': '1. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Ä—ã–±—É –Ω–∞ –ø–∞—Ä—É\n2. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –æ–≤–æ—â–∞–º–∏ –∏ –ª–∏–º–æ–Ω–æ–º'
                    }
                ],
                'total_calories': '1600 –∫–∫–∞–ª',
                'water_schedule': [
                    '7:00 - 200 –º–ª —Ç–µ–ø–ª–æ–π –≤–æ–¥—ã',
                    '8:00 - 200 –º–ª –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞',
                    '10:00 - 200 –º–ª',
                    '11:00 - 200 –º–ª –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫—É—Å–∞',
                    '13:00 - 200 –º–ª –ø–æ—Å–ª–µ –æ–±–µ–¥–∞',
                    '15:00 - 200 –º–ª',
                    '16:00 - 200 –º–ª –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫—É—Å–∞',
                    '18:00 - 200 –º–ª',
                    '19:00 - 200 –º–ª –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞',
                    '21:00 - 200 –º–ª –ø–µ—Ä–µ–¥ —Å–Ω–æ–º'
                ]
            }
            plan['days'].append(day)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        plan['shopping_list'] = {
            '–û–≤–æ—â–∏': [
                {'name': '–û–≤–æ—â–∏ –¥–ª—è —Å–∞–ª–∞—Ç–∞', 'quantity': '500–≥'},
                {'name': '–û–≤–æ—â–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è', 'quantity': '1–∫–≥'}
            ],
            '–§—Ä—É–∫—Ç—ã': [
                {'name': '–ë–∞–Ω–∞–Ω', 'quantity': '7—à—Ç'},
                {'name': '–Ø–≥–æ–¥—ã', 'quantity': '500–≥'},
                {'name': '–ü–µ—Ä—Å–∏–∫', 'quantity': '7—à—Ç'}
            ],
            '–ú—è—Å–æ/–†—ã–±–∞': [
                {'name': '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞', 'quantity': '1–∫–≥'},
                {'name': '–§–∏–ª–µ —Ä—ã–±—ã', 'quantity': '1.4–∫–≥'}
            ],
            '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã': [
                {'name': '–ú–æ–ª–æ–∫–æ', 'quantity': '1.5–ª'},
                {'name': '–ô–æ–≥—É—Ä—Ç –≥—Ä–µ—á–µ—Å–∫–∏–π', 'quantity': '1–∫–≥'},
                {'name': '–¢–≤–æ—Ä–æ–≥', 'quantity': '1–∫–≥'}
            ],
            '–ö—Ä—É–ø—ã': [
                {'name': '–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', 'quantity': '500–≥'},
                {'name': '–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞', 'quantity': '1–∫–≥'}
            ],
            '–ü—Ä–æ—á–µ–µ': [
                {'name': '–ú–µ–¥', 'quantity': '200–≥'},
                {'name': '–ú–∏–Ω–¥–∞–ª—å', 'quantity': '150–≥'},
                {'name': '–õ–∏–º–æ–Ω', 'quantity': '4—à—Ç'}
            ]
        }
        
        logger.info(f"‚úÖ Enhanced plan generated for user {user_data['user_id']}")
        return plan

# ==================== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –ú–ï–ù–Æ ====================

class InteractiveMenu:
    def __init__(self):
        self.days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê', '–í–û–°–ö–†–ï–°–ï–ù–¨–ï']
        self.meals = ['–ó–ê–í–¢–†–ê–ö', '–ü–ï–†–ï–ö–£–° 1', '–û–ë–ï–î', '–ü–ï–†–ï–ö–£–° 2', '–£–ñ–ò–ù']
    
    def get_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        keyboard = [
            [InlineKeyboardButton("üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù", callback_data="create_plan")],
            [InlineKeyboardButton("üìà –ß–ï–ö-–ò–ù", callback_data="checkin")],
            [InlineKeyboardButton("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", callback_data="stats")],
            [InlineKeyboardButton("üìã –ú–û–ô –ü–õ–ê–ù", callback_data="my_plan")],
            [InlineKeyboardButton("üõí –ö–û–†–ó–ò–ù–ê", callback_data="shopping_cart")],
            [InlineKeyboardButton("‚ùì –ü–û–ú–û–©–¨", callback_data="help")]
        ]
        
        if Config.ADMIN_USER_ID:
            keyboard.append([InlineKeyboardButton("üëë –ê–î–ú–ò–ù", callback_data="admin")])
            
        return InlineKeyboardMarkup(keyboard)
    
    def get_plan_data_input(self, step=1):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞"""
        if step == 1:
            keyboard = [
                [InlineKeyboardButton("üë® –ú–£–ñ–ß–ò–ù–ê", callback_data="gender_male")],
                [InlineKeyboardButton("üë© –ñ–ï–ù–©–ò–ù–ê", callback_data="gender_female")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
            ]
        elif step == 2:
            keyboard = [
                [InlineKeyboardButton("üéØ –ü–û–•–£–î–ï–ù–ò–ï", callback_data="goal_weight_loss")],
                [InlineKeyboardButton("üí™ –ù–ê–ë–û–† –ú–ê–°–°–´", callback_data="goal_mass")],
                [InlineKeyboardButton("‚öñÔ∏è –ü–û–î–î–ï–†–ñ–ê–ù–ò–ï", callback_data="goal_maintain")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_gender")]
            ]
        elif step == 3:
            keyboard = [
                [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –í–´–°–û–ö–ê–Ø", callback_data="activity_high")],
                [InlineKeyboardButton("üö∂‚Äç‚ôÇÔ∏è –°–†–ï–î–ù–Ø–Ø", callback_data="activity_medium")],
                [InlineKeyboardButton("üí§ –ù–ò–ó–ö–ê–Ø", callback_data="activity_low")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_goal")]
            ]
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_checkin_menu(self):
        """–ú–µ–Ω—é –¥–ª—è —á–µ–∫-–∏–Ω–∞"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–ê–ü–ò–°–ê–¢–¨ –î–ê–ù–ù–´–ï", callback_data="checkin_data")],
            [InlineKeyboardButton("üìä –ü–û–°–ú–û–¢–†–ï–¢–¨ –ò–°–¢–û–†–ò–Æ", callback_data="checkin_history")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_shopping_cart_menu(self, plan_id):
        """–ú–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫"""
        keyboard = [
            [InlineKeyboardButton("üìã –ü–û–°–ú–û–¢–†–ï–¢–¨ –ö–û–†–ó–ò–ù–£", callback_data=f"view_cart_{plan_id}")],
            [InlineKeyboardButton("‚úÖ –û–¢–ú–ï–¢–ò–¢–¨ –ö–£–ü–õ–ï–ù–ù–û–ï", callback_data=f"mark_purchased_{plan_id}")],
            [InlineKeyboardButton("üîÑ –°–ë–†–û–°–ò–¢–¨ –û–¢–ú–ï–¢–ö–ò", callback_data=f"reset_cart_{plan_id}")],
            [InlineKeyboardButton("üì• –°–ö–ê–ß–ê–¢–¨ –ö–û–†–ó–ò–ù–£ TXT", callback_data=f"download_cart_txt_{plan_id}")],
            [InlineKeyboardButton("üìÑ –°–ö–ê–ß–ê–¢–¨ –ü–õ–ê–ù TXT", callback_data=f"download_plan_txt_{plan_id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_my_plan_menu(self, plan_id=None):
        """–ú–µ–Ω—é –º–æ–µ–≥–æ –ø–ª–∞–Ω–∞"""
        if plan_id:
            keyboard = [
                [InlineKeyboardButton("üìã –ü–û–°–ú–û–¢–†–ï–¢–¨ –ü–õ–ê–ù", callback_data=f"view_plan_{plan_id}")],
                [InlineKeyboardButton("üõí –ö–û–†–ó–ò–ù–ê –ü–û–ö–£–ü–û–ö", callback_data=f"shopping_cart_plan_{plan_id}")],
                [InlineKeyboardButton("üì• –°–ö–ê–ß–ê–¢–¨ –ü–õ–ê–ù TXT", callback_data=f"download_plan_txt_{plan_id}")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üìã –ü–û–°–ú–û–¢–†–ï–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ô –ü–õ–ê–ù", callback_data="view_latest_plan")],
                [InlineKeyboardButton("üìö –í–°–ï –ú–û–ò –ü–õ–ê–ù–´", callback_data="view_all_plans")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
            ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_back_menu(self):
        """–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(keyboard)

# ==================== FLASK APP ====================

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
application = None
menu = InteractiveMenu()

# ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        user_data = {
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        save_user(user_data)
        
        welcome_text = """
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è!

ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ —á–µ–∫-–∏–Ω—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
        if is_admin(user.id):
            welcome_text += "\nüëë –í–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∞–º!"
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=menu.get_main_menu()
        )
        logger.info(f"‚úÖ Start command processed for user {user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in start_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu.get_main_menu()
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–ê ====================

async def handle_create_plan(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        context.user_data['plan_data'] = {}
        context.user_data['plan_step'] = 1
        
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=menu.get_plan_data_input(step=1)
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in create plan handler: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=menu.get_main_menu()
        )

async def handle_gender(query, context, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    try:
        gender_map = {
            "gender_male": "–ú–£–ñ–ß–ò–ù–ê",
            "gender_female": "–ñ–ï–ù–©–ò–ù–ê"
        }
        
        context.user_data['plan_data']['gender'] = gender_map[data]
        context.user_data['plan_step'] = 2
        
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=menu.get_plan_data_input(step=2)
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in gender handler: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=menu.get_main_menu()
        )

async def handle_goal(query, context, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    try:
        goal_map = {
            "goal_weight_loss": "–ü–û–•–£–î–ï–ù–ò–ï",
            "goal_mass": "–ù–ê–ë–û–† –ú–ê–°–°–´", 
            "goal_maintain": "–ü–û–î–î–ï–†–ñ–ê–ù–ò–ï"
        }
        
        context.user_data['plan_data']['goal'] = goal_map[data]
        context.user_data['plan_step'] = 3
        
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=menu.get_plan_data_input(step=3)
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in goal handler: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=menu.get_main_menu()
        )

async def handle_activity(query, context, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        activity_map = {
            "activity_high": "–í–´–°–û–ö–ê–Ø",
            "activity_medium": "–°–†–ï–î–ù–Ø–Ø",
            "activity_low": "–ù–ò–ó–ö–ê–Ø"
        }
        
        context.user_data['plan_data']['activity'] = activity_map[data]
        context.user_data['awaiting_input'] = 'plan_details'
        
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç (—Å–º), –í–µ—Å (–∫–≥)\n\n"
            "–ü—Ä–∏–º–µ—Ä: 30, 180, 75\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /menu",
            reply_markup=menu.get_back_menu()
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in activity handler: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=menu.get_main_menu()
        )

async def process_plan_details(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞"""
    try:
        parts = [part.strip() for part in text.split(',')]
        if len(parts) != 3:
            raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        
        age, height, weight = int(parts[0]), int(parts[1]), float(parts[2])
        
        if not (10 <= age <= 100):
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 –ª–µ—Ç")
        if not (100 <= height <= 250):
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º")
        if not (30 <= weight <= 300):
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")
        
        user_data = {
            **context.user_data['plan_data'],
            'age': age,
            'height': height,
            'weight': weight,
            'user_id': update.effective_user.id,
            'username': update.effective_user.username
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        progress_message = await update.message.reply_text(
            "üîÑ –í–∞—à –ø–ª–∞–Ω –≥–æ—Ç–æ–≤–∏—Ç—Å—è...\n\n"
            "üéì –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...",
            reply_markup=menu.get_back_menu()
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
        plan_data = EnhancedPlanGenerator.generate_plan_with_progress_indicator(user_data)
        
        if plan_data:
            plan_id = save_plan(user_data['user_id'], plan_data)
            
            await progress_message.delete()
            
            success_text = f"""
üéâ –í–ê–® –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ì–û–¢–û–í!

üë§ –î–∞–Ω–Ω—ã–µ: {user_data['gender']}, {age} –ª–µ—Ç, {height} —Å–º, {weight} –∫–≥
üéØ –¶–µ–ª—å: {user_data['goal']}
üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['activity']}

üìã –ü–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ 7 –¥–Ω–µ–π –ø–∏—Ç–∞–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —á–∞—Å–∞–º
‚Ä¢ 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫

üíß –í–û–î–ù–´–ô –†–ï–ñ–ò–ú:
{plan_data.get('water_regime', {}).get('total', '2.0 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å')}

üéì –°–û–í–ï–¢ –ü–†–û–§–ï–°–°–û–†–ê:
{plan_data.get('professor_advice', '')}

–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–û–ô –ü–õ–ê–ù" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
"""
            await update.message.reply_text(
                success_text,
                reply_markup=menu.get_my_plan_menu(plan_id)
            )
            
            logger.info(f"‚úÖ Plan successfully created for user {user_data['user_id']}")
            
        else:
            await progress_message.delete()
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=menu.get_main_menu()
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data['awaiting_input'] = None
        context.user_data['plan_data'] = {}
        context.user_data['plan_step'] = None
        
    except ValueError as e:
        error_msg = str(e)
        if "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3 —á–∏—Å–ª–∞" in error_msg:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –í–æ–∑—Ä–∞—Å—Ç, –†–æ—Å—Ç, –í–µ—Å\n–ü—Ä–∏–º–µ—Ä: 30, 180, 80\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
        else:
            await update.message.reply_text(
                f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
    except Exception as e:
        logger.error(f"‚ùå Error processing plan details: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=menu.get_main_menu()
        )

# ==================== –ü–†–û–°–¢–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–• –ö–ù–û–ü–û–ö ====================

async def handle_checkin_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —á–µ–∫-–∏–Ω–∞"""
    await query.edit_message_text(
        "üìà –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ß–ï–ö-–ò–ù\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=menu.get_checkin_menu()
    )

async def handle_stats(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await query.edit_message_text(
        "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=menu.get_main_menu()
    )

async def handle_my_plan_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –º–æ–µ–≥–æ –ø–ª–∞–Ω–∞"""
    user_id = query.from_user.id
    latest_plan = get_latest_plan(user_id)
    
    if latest_plan:
        await query.edit_message_text(
            "üìã –ú–û–ô –ü–õ–ê–ù\n\n–£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu.get_my_plan_menu(latest_plan['id'])
        )
    else:
        await query.edit_message_text(
            "üìã –ú–û–ô –ü–õ–ê–ù\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù'!",
            reply_markup=menu.get_my_plan_menu()
        )

async def handle_shopping_cart_main(query, context):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = query.from_user.id
    latest_plan = get_latest_plan(user_id)
    
    if latest_plan:
        await query.edit_message_text(
            f"üõí –ö–û–†–ó–ò–ù–ê –ü–û–ö–£–ü–û–ö (–ü–ª–∞–Ω ID: {latest_plan['id']})\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu.get_shopping_cart_menu(latest_plan['id'])
        )
    else:
        await query.edit_message_text(
            "üõí –ö–û–†–ó–ò–ù–ê –ü–û–ö–£–ü–û–ö\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫!",
            reply_markup=menu.get_main_menu()
        )

async def handle_help(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    help_text = """
‚ùì –ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£

üìä –°–û–ó–î–ê–¢–¨ –ü–õ–ê–ù:
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à –ø–æ–ª, —Ü–µ–ª—å, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è

üìà –ß–ï–ö-–ò–ù:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

üìã –ú–û–ô –ü–õ–ê–ù:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–∫—É–ø–æ–∫

üõí –ö–û–†–ó–ò–ù–ê:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ø–ª–∞–Ω–∞
‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
"""
    await query.edit_message_text(
        help_text,
        reply_markup=menu.get_main_menu()
    )

async def handle_admin_callback(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤"""
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await query.edit_message_text(
        "üëë –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n–§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=menu.get_main_menu()
    )

async def show_main_menu(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await query.edit_message_text(
        "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu.get_main_menu()
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK ====================

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    logger.info(f"üì® Callback received: {data} from user {query.from_user.id}")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        if data == "create_plan":
            await handle_create_plan(query, context)
        elif data == "checkin":
            await handle_checkin_menu(query, context)
        elif data == "stats":
            await handle_stats(query, context)
        elif data == "my_plan":
            await handle_my_plan_menu(query, context)
        elif data == "shopping_cart":
            await handle_shopping_cart_main(query, context)
        elif data == "help":
            await handle_help(query, context)
        elif data == "admin":
            await handle_admin_callback(query, context)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
        elif data == "back_main":
            await show_main_menu(query)
        elif data.startswith("back_gender"):
            await handle_gender_back(query, context)
        elif data.startswith("back_goal"):
            await handle_goal_back(query, context)
        
        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞
        elif data.startswith("gender_"):
            await handle_gender(query, context, data)
        elif data.startswith("goal_"):
            await handle_goal(query, context, data)
        elif data.startswith("activity_"):
            await handle_activity(query, context, data)
        
        else:
            logger.warning(f"‚ö†Ô∏è Unknown callback data: {data}")
            await query.edit_message_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                reply_markup=menu.get_main_menu()
            )
            
    except Exception as e:
        logger.error(f"‚ùå Error in callback handler: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=menu.get_main_menu()
        )

async def handle_gender_back(query, context):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞"""
    try:
        context.user_data['plan_step'] = 1
        
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=menu.get_plan_data_input(step=1)
        )
    except Exception as e:
        logger.error(f"‚ùå Error in gender back handler: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –Ω–∞—á–∞–ª–∞.",
            reply_markup=menu.get_main_menu()
        )

async def handle_goal_back(query, context):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏"""
    try:
        context.user_data['plan_step'] = 2
        
        await query.edit_message_text(
            "üìä –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=menu.get_plan_data_input(step=2)
        )
    except Exception as e:
        logger.error(f"‚ùå Error in goal back handler: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –Ω–∞—á–∞–ª–∞.",
            reply_markup=menu.get_main_menu()
        )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        if text == "/menu":
            await update.message.reply_text(
                "ü§ñ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=menu.get_main_menu()
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
        elif context.user_data.get('awaiting_input') == 'plan_details':
            await process_plan_details(update, context, text)
        else:
            await update.message.reply_text(
                "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                reply_markup=menu.get_main_menu()
            )
                
    except Exception as e:
        logger.error(f"‚ùå Error in message handler: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=menu.get_main_menu()
        )

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ====================

def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global application
    try:
        Config.validate()
        init_database()
        
        # –°–æ–∑–¥–∞–µ–º application
        application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        logger.info("‚úÖ Bot initialized successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize bot: {e}")
        return False

# ==================== FLASK ROUTES ====================

@app.route('/')
def home():
    return """
    <h1>ü§ñ Nutrition Bot is Running!</h1>
    <p>–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è</p>
    <p><a href="/health">Health Check</a></p>
    <p>üïí Last update: {}</p>
    <p>üîß Mode: WEBHOOK</p>
    <p>üöÄ Status: Active</p>
    """.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

@app.route('/health')
def health_check():
    return jsonify({
        "status": "healthy", 
        "service": "nutrition-bot",
        "timestamp": datetime.now().isoformat(),
        "bot_status": "running" if application else "stopped"
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint for Telegram"""
    if request.method == "POST" and application:
        try:
            update = Update.de_json(request.get_json(), application.bot)
            application.update_queue.put(update)
            return "ok"
        except Exception as e:
            logger.error(f"‚ùå Webhook error: {e}")
            return "error"
    return "error"

# ==================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        logger.info("üöÄ Starting Nutrition Bot...")
        
        if not init_bot():
            logger.error("‚ùå Failed to initialize bot. Exiting.")
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è Render
        if Config.RENDER and Config.WEBHOOK_URL:
            try:
                webhook_url = f"{Config.WEBHOOK_URL}/webhook"
                application.bot.set_webhook(webhook_url)
                logger.info(f"‚úÖ Webhook set to: {webhook_url}")
            except Exception as e:
                logger.error(f"‚ùå Failed to set webhook: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            port = int(os.environ.get('PORT', Config.PORT))
            logger.info(f"üåê Starting Flask app on port {port}")
            app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ
            logger.info("ü§ñ Starting bot in POLLING mode...")
            application.run_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES
            )
        
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")

if __name__ == "__main__":
    main()
