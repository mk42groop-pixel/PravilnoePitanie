import os
import json
import re
import logging
import asyncio
import random
import requests
from typing import Dict, Any, List, Tuple
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from threading import Thread
from datetime import datetime, timedelta

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
CHANNEL_USERNAME = "@ppsupershef"
PORT = int(os.environ.get('PORT', 5000))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–µ—Å–µ–¥—ã
(
    SUBSCRIPTION_CHECK, START, GOAL, DIET, ALLERGIES, GENDER, AGE, HEIGHT, WEIGHT, ACTIVITY,
    CONFIRMATION, SELECT_PACKAGE, PAYMENT_METHOD, AWAITING_PAYMENT, PROCESSING
) = range(15)

# –ü–∞–∫–µ—Ç—ã —É—Å–ª—É–≥
SERVICE_PACKAGES = {
    'basic': {
        'name': 'üéØ –ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç',
        'description': '–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π + —Ä–∞—Å—á–µ—Ç –ë–ñ–£',
        'price': 100,
        'features': [
            'üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π',
            'üìä –†–∞—Å—á–µ—Ç –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π', 
            'üíß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É'
        ]
    },
    'standard': {
        'name': 'üöÄ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç',
        'description': '–ü–ª–∞–Ω + —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π',
        'price': 200,
        'features': [
            'üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π',
            'üìä –†–∞—Å—á–µ—Ç –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π',
            'üíß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É',
            'üë®‚Äçüç≥ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π'
        ]
    },
    'premium': {
        'name': 'üëë –ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç',
        'description': '–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç + –±–æ–Ω—É—Å—ã',
        'price': 300,
        'features': [
            'üìÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π',
            'üìä –†–∞—Å—á–µ—Ç –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π',
            'üë®‚Äçüç≥ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π',
            'üõí –£–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
            'üíß –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º',
            'üéÅ –ë–æ–Ω—É—Å: –≥–∞–π–¥ –ø–æ –ü–ü'
        ]
    }
}

class SubscriptionChecker:
    async def check_subscription(self, user_id: int, bot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            chat_member = await bot.get_chat_member(
                chat_id=CHANNEL_USERNAME, 
                user_id=user_id
            )
            
            valid_statuses = ['member', 'administrator', 'creator']
            return chat_member.status in valid_statuses
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

class NutritionProfessor:
    def __init__(self):
        self.required_days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        self.meals = ['–∑–∞–≤—Ç—Ä–∞–∫', '–ø–µ—Ä–µ–∫—É—Å', '–æ–±–µ–¥', '–ø–µ—Ä–µ–∫—É—Å', '—É–∂–∏–Ω']
    
    def calculate_bmi(self, height: int, weight: int) -> float:
        """–†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞"""
        return round(weight / ((height / 100) ** 2), 1)
    
    def calculate_calories(self, user_data: Dict[str, Any]) -> int:
        """–†–∞—Å—á–µ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞"""
        age = int(user_data['age'])
        height = int(user_data['height'])
        weight = int(user_data['weight'])
        gender = user_data['gender']
        activity = user_data['activity']
        
        if gender == '–º—É–∂—Å–∫–æ–π':
            bmr = 10 * weight + 6.25 * height - 5 * age + 5
        else:
            bmr = 10 * weight + 6.25 * height - 5 * age - 161
        
        activity_multipliers = {
            '—Å–∏–¥—è—á–∏–π': 1.2,
            '—É–º–µ—Ä–µ–Ω–Ω–∞—è': 1.375,
            '–∞–∫—Ç–∏–≤–Ω—ã–π': 1.55,
            '–æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π': 1.725
        }
        
        maintenance = bmr * activity_multipliers.get(activity, 1.375)
        
        goal = user_data['goal']
        if goal == '–ø–æ—Ö—É–¥–µ–Ω–∏–µ':
            return int(maintenance * 0.85)
        elif goal == '–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã':
            return int(maintenance * 1.15)
        else:
            return int(maintenance)
    
    def calculate_bju(self, user_data: Dict[str, Any], calories: int) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –ë–ñ–£"""
        goal = user_data['goal']
        
        if goal == '–ø–æ—Ö—É–¥–µ–Ω–∏–µ':
            protein_ratio = 0.30
            fat_ratio = 0.25
            carb_ratio = 0.45
        elif goal == '–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã':
            protein_ratio = 0.35
            fat_ratio = 0.25
            carb_ratio = 0.40
        else:
            protein_ratio = 0.25
            fat_ratio = 0.25
            carb_ratio = 0.50
        
        protein = (calories * protein_ratio) / 4
        fat = (calories * fat_ratio) / 9
        carbs = (calories * carb_ratio) / 4
        
        return {
            'protein': round(protein),
            'fat': round(fat),
            'carbs': round(carbs)
        }
    
    def calculate_water_intake(self, weight: int) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –≤–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        min_water = weight * 30
        max_water = weight * 40
        avg_water = (min_water + max_water) // 2
        
        water_schedule = [
            {"time": "07:00", "amount": 250, "description": "–°—Ç–∞–∫–∞–Ω —Ç–µ–ø–ª–æ–π –≤–æ–¥—ã –Ω–∞—Ç–æ—â–∞–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞"},
            {"time": "08:30", "amount": 200, "description": "–ü–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞ - —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—é"},
            {"time": "10:00", "amount": 200, "description": "–ú–µ–∂–¥—É –∑–∞–≤—Ç—Ä–∞–∫–æ–º –∏ –ø–µ—Ä–µ–∫—É—Å–æ–º - –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏"},
            {"time": "11:30", "amount": 200, "description": "–ü–µ—Ä–µ–¥ –æ–±–µ–¥–æ–º - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ñ–ö–¢ –∫ –ø—Ä–∏–µ–º—É –ø–∏—â–∏"},
            {"time": "13:30", "amount": 200, "description": "–ü–æ—Å–ª–µ –æ–±–µ–¥–∞ - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –µ–¥—ã"},
            {"time": "15:00", "amount": 200, "description": "–í–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è - –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏"},
            {"time": "17:00", "amount": 200, "description": "–ü–µ—Ä–µ–¥ —É–∂–∏–Ω–æ–º - —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–ø–ø–µ—Ç–∏—Ç–∞"},
            {"time": "19:00", "amount": 200, "description": "–ü–æ—Å–ª–µ —É–∂–∏–Ω–∞ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã"}
        ]
        
        return {
            "min_water": min_water,
            "max_water": max_water,
            "avg_water": avg_water,
            "schedule": water_schedule,
            "recommendations": [
                "–ü–µ–π—Ç–µ –≤–æ–¥—É –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
                "–ù–µ –ø–µ–π—Ç–µ –≤–æ –≤—Ä–µ–º—è –µ–¥—ã - —Ç–æ–ª—å–∫–æ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ",
                "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –ø—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö",
                "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –∑–∞ 2 —á–∞—Å–∞ –¥–æ —Å–Ω–∞"
            ]
        }

class AdminPanel:
    def __init__(self):
        self.orders = {}
        self.admin_chat_id = ADMIN_CHAT_ID
    
    async def notify_admin_new_order(self, order_id: str, user_data: dict, bot):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        if not self.admin_chat_id:
            return
            
        order_info = (
            f"üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_data.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû User ID: {user_data.get('user_id')}\n"
            f"üì¶ –ü–∞–∫–µ—Ç: {user_data.get('selected_package')}\n"
            f"üíµ –°—É–º–º–∞: {SERVICE_PACKAGES[user_data.get('selected_package')]['price']}‚ÇΩ\n"
            f"üìã –ù–æ–º–µ—Ä: #{order_id}\n\n"
            f"‚ö° –î–µ–π—Å—Ç–≤–∏—è:\n"
            f"/confirm_{order_id} - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
            f"/send_{order_id} - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω\n"
            f"/cancel_{order_id} - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
        )
        
        await bot.send_message(
            chat_id=self.admin_chat_id,
            text=order_info
        )
    
    async def send_plan_to_client(self, order_id: str, bot, files_info: list):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞–Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –∫–ª–∏–µ–Ω—Ç—É"""
        order = self.orders.get(order_id)
        if not order:
            return False
        
        user_id = order['user_id']
        
        try:
            await bot.send_message(
                chat_id=user_id,
                text="üéâ –í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤! –ü—Ä–∏—Å—ã–ª–∞—é —Ñ–∞–π–ª—ã..."
            )
            
            for file_info in files_info:
                with open(file_info['path'], 'rb') as f:
                    await bot.send_document(
                        chat_id=user_id,
                        document=InputFile(f, filename=file_info['filename']),
                        caption=file_info['description']
                    )
            
            await bot.send_message(
                chat_id=user_id,
                text=(
                    "üì¶ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!\n\n"
                    "üí° –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è journey –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n"
                    "üëâ @ppsupershef\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ‚ù§Ô∏è\n"
                    "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–ª–∞–Ω?"
                ),
                reply_markup=ReplyKeyboardMarkup([
                    ["üÜï –ù–æ–≤—ã–π –ø–ª–∞–Ω"], 
                    ["üì¢ –ù–∞—à –∫–∞–Ω–∞–ª"]
                ], resize_keyboard=True)
            )
            
            order['status'] = 'delivered'
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É {user_id}: {e}")
            return False

class PaymentManager:
    def __init__(self):
        self.pending_orders = {}
    
    def create_order(self, user_data: dict, package: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
        order_id = f"nutrition{random.randint(10000, 99999)}"
        
        self.pending_orders[order_id] = {
            'user_data': user_data.copy(),
            'package': package,
            'status': 'pending',
            'created_at': datetime.now(),
            'user_id': user_data.get('user_id')
        }
        
        return order_id
    
    def confirm_payment(self, order_id: str) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)"""
        if order_id in self.pending_orders:
            self.pending_orders[order_id]['status'] = 'paid'
            return True
        return False
    
    def can_generate_plan(self, order_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–Ω–æ –ª–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω"""
        order = self.pending_orders.get(order_id)
        return order and order['status'] == 'paid'

class ReminderSystem:
    def __init__(self):
        self.follow_ups = {}
    
    async def schedule_follow_up(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è"""
        self.follow_ups[user_id] = datetime.now() + timedelta(days=3)
        
        context.job_queue.run_once(
            callback=self.send_follow_up,
            when=timedelta(days=3),
            data=user_id,
            name=f"follow_up_{user_id}"
        )
    
    async def send_follow_up(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è"""
        user_id = context.job.data
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üìä –ö–∞–∫ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏ —Å –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è?\n\n"
                     "‚Ä¢ –°–ª–µ–¥—É–µ—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º?\n"
                     "‚Ä¢ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?\n" 
                     "‚Ä¢ –ù—É–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞?",
                reply_markup=ReplyKeyboardMarkup([
                    ["‚úÖ –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ", "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã"],
                    ["üîÑ –ù—É–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "üÜï –ù–æ–≤—ã–π –ø–ª–∞–Ω"]
                ], resize_keyboard=True)
            )
            
            if user_id in self.follow_ups:
                del self.follow_ups[user_id]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")

class KnowledgeBase:
    def __init__(self):
        self.articles = {
            "bju": {
                "title": "üìö –ß—Ç–æ —Ç–∞–∫–æ–µ –ë–ñ–£?",
                "content": (
                    "üîç *–ë–ñ–£* - —ç—Ç–æ –ë–µ–ª–∫–∏, –ñ–∏—Ä—ã, –£–≥–ª–µ–≤–æ–¥—ã - –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã:\n\n"
                    "ü•ö *–ë–µ–ª–∫–∏:* 1 –≥ = 4 –∫–∫–∞–ª\n"
                    "‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –º—ã—à—Ü\n"
                    "‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –º—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞, —Ç–≤–æ—Ä–æ–≥\n\n"
                    "ü•ë *–ñ–∏—Ä—ã:* 1 –≥ = 9 –∫–∫–∞–ª\n" 
                    "‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è –∏ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
                    "‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ, –º–∞—Å–ª–∞\n\n"
                    "üåæ *–£–≥–ª–µ–≤–æ–¥—ã:* 1 –≥ = 4 –∫–∫–∞–ª\n"
                    "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏\n"
                    "‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –∫—Ä—É–ø—ã, —Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏"
                )
            },
            "water": {
                "title": "üíß –í–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º", 
                "content": (
                    "üíß *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º:*\n\n"
                    "‚Ä¢ 30-40 –º–ª –Ω–∞ 1 –∫–≥ –≤–µ—Å–∞ –≤ –¥–µ–Ω—å\n"
                    "‚Ä¢ –ü–∏—Ç—å –∑–∞ 30 –º–∏–Ω—É—Ç –î–û –µ–¥—ã\n"
                    "‚Ä¢ –ù–µ –ø–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –µ–¥—ã\n"
                    "‚Ä¢ –ü–∏—Ç—å —á–µ—Ä–µ–∑ 1 —á–∞—Å –ü–û–°–õ–ï –µ–¥—ã\n"
                    "‚Ä¢ –õ—É—á—à–µ –≤–æ–¥–∞ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"
                )
            }
        }

class LoyaltySystem:
    def __init__(self):
        self.client_weeks = {}
    
    def add_week_plan(self, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if user_id not in self.client_weeks:
            self.client_weeks[user_id] = 0
        self.client_weeks[user_id] += 1
    
    def check_discount_eligibility(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ —Å–∫–∏–¥–∫—É (4 –Ω–µ–¥–µ–ª–∏)"""
        return self.client_weeks.get(user_id, 0) >= 4
    
    async def offer_discount(self, user_id: int, bot):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –ª–æ—è–ª—å–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É"""
        if self.check_discount_eligibility(user_id):
            await bot.send_message(
                chat_id=user_id,
                text="üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É 15% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω!\n\n"
                     "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—å! ‚ù§Ô∏è",
                reply_markup=ReplyKeyboardMarkup([
                    ["üÜï –ù–æ–≤—ã–π –ø–ª–∞–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π"],
                    ["üì¢ –ù–∞—à –∫–∞–Ω–∞–ª"]
                ], resize_keyboard=True)
            )
            return True
        return False

async def send_channel_notification(order_id: str, user_data: dict, bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –æ –Ω–æ–≤–æ–º –ø–ª–∞–Ω–µ"""
    try:
        message_text = (
            "üéØ *–í–Ω–∏–º–∞–Ω–∏–µ! –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–∞–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è*\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {user_data.get('user_name', '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç')}\n"
            f"‚ö° *–°—Ç–∞—Ç—É—Å:* –ü–ª–∞–Ω —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\n"
            f"#{order_id} #–Ω–æ–≤—ã–π–∫–ª–∏–µ–Ω—Ç #–ø–ª–∞–Ω–ø–∏—Ç–∞–Ω–∏—è"
        )
        
        await bot.send_message(
            chat_id=CHANNEL_USERNAME,
            text=message_text,
            parse_mode='Markdown'
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
nutrition_professor = NutritionProfessor()
subscription_checker = SubscriptionChecker()
admin_panel = AdminPanel()
payment_manager = PaymentManager()
reminder_system = ReminderSystem()
knowledge_base = KnowledgeBase()
loyalty_system = LoyaltySystem()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = Application.builder().token(BOT_TOKEN).build()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_goal_keyboard(show_back: bool = False):
    keyboard = [["–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"], ["–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã"]]
    if show_back:
        keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_diet_keyboard(show_back: bool = False):
    keyboard = [["—Å—Ç–∞–Ω–¥–∞—Ä—Ç", "–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è"], ["–≤–µ–≥–∞–Ω—Å–∫–∞—è", "–±–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–∞—è"], ["–Ω–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–∞—è"]]
    if show_back:
        keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_allergies_keyboard(show_back: bool = False):
    keyboard = [["–Ω–µ—Ç", "–æ—Ä–µ—Ö–∏"], ["–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", "—è–π—Ü–∞"], ["—Ä—ã–±–∞/–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã"]]
    if show_back:
        keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_gender_keyboard(show_back: bool = False):
    keyboard = [["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]]
    if show_back:
        keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_activity_keyboard(show_back: bool = False):
    keyboard = [["—Å–∏–¥—è—á–∏–π", "—É–º–µ—Ä–µ–Ω–Ω–∞—è"], ["–∞–∫—Ç–∏–≤–Ω—ã–π", "–æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π"]]
    if show_back:
        keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_confirmation_keyboard():
    keyboard = [["‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_edit_keyboard():
    keyboard = [
        ["üéØ –¶–µ–ª—å", "ü•ó –¢–∏–ø –¥–∏–µ—Ç—ã"],
        ["‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏", "üë§ –ü–æ–ª"],
        ["üéÇ –í–æ–∑—Ä–∞—Å—Ç", "üìè –†–æ—Å—Ç"],
        ["‚öñÔ∏è –í–µ—Å", "üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"],
        ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_packages_keyboard():
    keyboard = [
        ["üéØ –ë–∞–∑–æ–≤—ã–π - 100‚ÇΩ", "üöÄ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - 200‚ÇΩ"],
        ["üëë –ü—Ä–µ–º–∏—É–º - 300‚ÇΩ", "‚ùì –°—Ä–∞–≤–Ω–∏—Ç—å –ø–∞–∫–µ—Ç—ã"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∫–µ—Ç–µ"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_payment_keyboard():
    keyboard = [
        ["üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", "üì± –°–ë–ü –ø–µ—Ä–µ–≤–æ–¥"],
        ["üì≤ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –±–∞–Ω–∫–∞", "‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_subscription_keyboard():
    keyboard = [
        ["‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_new_plan_keyboard():
    keyboard = [
        ["üÜï –ù–æ–≤—ã–π –ø–ª–∞–Ω"],
        ["üì¢ –ù–∞—à –∫–∞–Ω–∞–ª"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_progress_text(user_data: Dict[str, Any], current_step: str = None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    progress = "üìä –í–í–ï–î–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:\n"
    
    steps = {
        'goal': 'üéØ –¶–µ–ª—å',
        'diet': 'ü•ó –¢–∏–ø –¥–∏–µ—Ç—ã', 
        'allergies': '‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏',
        'gender': 'üë§ –ü–æ–ª',
        'age': 'üéÇ –í–æ–∑—Ä–∞—Å—Ç',
        'height': 'üìè –†–æ—Å—Ç',
        'weight': '‚öñÔ∏è –í–µ—Å',
        'activity': 'üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
    }
    
    for key, description in steps.items():
        if key in user_data:
            value = user_data[key]
            if current_step == key:
                progress += f"   {description}: {value} ‚úÖ\n"
            else:
                progress += f"   {description}: {value}\n"
        else:
            if current_step == key:
                progress += f"   {description}: ... üîÑ\n"
            else:
                progress += f"   {description}: ‚ùå\n"
    
    return progress

async def show_subscription_required(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    subscription_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏!\n\n"
        "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é.\n\n"
        "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...\n\n"
        "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n"
        f"üëâ {CHANNEL_USERNAME}\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª"
    )
    
    await update.message.reply_text(
        subscription_text,
        reply_markup=create_subscription_keyboard(),
        disable_web_page_preview=False
    )
    return SUBSCRIPTION_CHECK

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = update.effective_user.id
    
    is_subscribed = await subscription_checker.check_subscription(user_id, context.bot)
    
    if not is_subscribed:
        await show_subscription_required(update, context)
        return SUBSCRIPTION_CHECK
    
    context.user_data.clear()
    await update.message.reply_text(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π —Å —É—á–µ—Ç–æ–º:\n"
        "‚Ä¢ üéØ –í–∞—à–∏—Ö —Ü–µ–ª–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"  
        "‚Ä¢ ü•ó –î–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n"
        "‚Ä¢ üíß –í–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞\n"
        "‚Ä¢ üìä –ë–∞–ª–∞–Ω—Å–∞ –ë–ñ–£\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
        reply_markup=create_goal_keyboard()
    )
    return GOAL

async def process_subscription_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª":
        channel_link = f"https://t.me/{CHANNEL_USERNAME.replace('@', '')}"
        await update.message.reply_text(
            f"üì¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n{channel_link}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"]], resize_keyboard=True)
        )
        return SUBSCRIPTION_CHECK
    
    elif text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        is_subscribed = await subscription_checker.check_subscription(user_id, context.bot)
        
        if is_subscribed:
            await update.message.reply_text(
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n\n"
                "–¢–µ–ø–µ—Ä—å —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...",
                reply_markup=ReplyKeyboardRemove()
            )
            return await start(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –≤—Å–µ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –µ—â–µ —Ä–∞–∑.",
                reply_markup=create_subscription_keyboard()
            )
            return SUBSCRIPTION_CHECK
    
    return SUBSCRIPTION_CHECK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–Ω–∫–µ—Ç—ã
async def process_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=create_goal_keyboard()
        )
        return GOAL
    
    if text not in ['–ø–æ—Ö—É–¥–µ–Ω–∏–µ', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞', '–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return GOAL
    
    context.user_data['goal'] = text
    
    progress_text = get_progress_text(context.user_data, 'goal')
    await update.message.reply_text(
        f"{progress_text}\n\n"
        "ü•ó –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–µ—Ç—ã:",
        reply_markup=create_diet_keyboard(show_back=True)
    )
    return DIET

async def process_diet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–µ—Ç—ã"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        progress_text = get_progress_text(context.user_data, 'goal')
        await update.message.reply_text(
            f"{progress_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=create_goal_keyboard(show_back=True)
        )
        return GOAL
    
    if text not in ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è', '–≤–µ–≥–∞–Ω—Å–∫–∞—è', '–±–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–∞—è', '–Ω–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–∞—è']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–µ—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return DIET
    
    context.user_data['diet'] = text
    
    progress_text = get_progress_text(context.user_data, 'diet')
    await update.message.reply_text(
        f"{progress_text}\n\n"
        "‚ö†Ô∏è –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏?",
        reply_markup=create_allergies_keyboard(show_back=True)
    )
    return ALLERGIES

async def process_allergies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª–ª–µ—Ä–≥–∏–π"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        progress_text = get_progress_text(context.user_data, 'diet')
        await update.message.reply_text(
            f"{progress_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–µ—Ç—ã:",
            reply_markup=create_diet_keyboard(show_back=True)
        )
        return DIET
    
    if text not in ['–Ω–µ—Ç', '–æ—Ä–µ—Ö–∏', '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '—è–π—Ü–∞', '—Ä—ã–±–∞/–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return ALLERGIES
    
    context.user_data['allergies'] = text
    
    progress_text = get_progress_text(context.user_data, 'allergies')
    await update.message.reply_text(
        f"{progress_text}\n\n"
        "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=create_gender_keyboard(show_back=True)
    )
    return GENDER

async def process_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        progress_text = get_progress_text(context.user_data, 'allergies')
        await update.message.reply_text(
            f"{progress_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏:",
            reply_markup=create_allergies_keyboard(show_back=True)
        )
        return ALLERGIES
    
    if text not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return GENDER
    
    context.user_data['gender'] = text
    
    progress_text = get_progress_text(context.user_data, 'gender')
    await update.message.reply_text(
        f"{progress_text}\n\n"
        "üéÇ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç, –æ—Ç 10 –¥–æ 100):",
        reply_markup=ReplyKeyboardRemove()
    )
    return AGE

async def process_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        progress_text = get_progress_text(context.user_data, 'gender')
        await update.message.reply_text(
            f"{progress_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
            reply_markup=create_gender_keyboard(show_back=True)
        )
        return GENDER
    
    try:
        age = int(text)
        if age < 10 or age > 100:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç):")
            return AGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return AGE
    
    context.user_data['age'] = age
    
    progress_text = get_progress_text(context.user_data, 'age')
    await update.message.reply_text(
        f"{progress_text}\n\n"
        "üìè –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º, –æ—Ç 100 –¥–æ 250):"
    )
    return HEIGHT

async def process_height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        progress_text = get_progress_text(context.user_data, 'age')
        await update.message.reply_text(
            f"{progress_text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:"
        )
        return AGE
    
    try:
        height = int(text)
        if height < 100 or height > 250:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
            return HEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return HEIGHT
    
    context.user_data['height'] = height
    
    progress_text = get_progress_text(context.user_data, 'height')
    await update.message.reply_text(
        f"{progress_text}\n\n"
        "‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥, –æ—Ç 30 –¥–æ 300):"
    )
    return WEIGHT

async def process_weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        progress_text = get_progress_text(context.user_data, 'height')
        await update.message.reply_text(
            f"{progress_text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç:"
        )
        return HEIGHT
    
    try:
        weight = int(text)
        if weight < 30 or weight > 300:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (30-300 –∫–≥):")
            return WEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return WEIGHT
    
    context.user_data['weight'] = weight
    
    progress_text = get_progress_text(context.user_data, 'weight')
    await update.message.reply_text(
        f"{progress_text}\n\n"
        "üèÉ‚Äç‚ôÇÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=create_activity_keyboard(show_back=True)
    )
    return ACTIVITY

async def process_activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        progress_text = get_progress_text(context.user_data, 'weight')
        await update.message.reply_text(
            f"{progress_text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å:"
        )
        return WEIGHT
    
    if text not in ['—Å–∏–¥—è—á–∏–π', '—É–º–µ—Ä–µ–Ω–Ω–∞—è', '–∞–∫—Ç–∏–≤–Ω—ã–π', '–æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return ACTIVITY
    
    context.user_data['activity'] = text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    professor = NutritionProfessor()
    calories = professor.calculate_calories(context.user_data)
    bju = professor.calculate_bju(context.user_data, calories)
    water = professor.calculate_water_intake(int(context.user_data['weight']))
    
    progress_text = get_progress_text(context.user_data, 'activity')
    confirmation_text = (
        f"{progress_text}\n\n"
        "üìä –†–ê–°–ß–ï–¢–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
        f"   ‚Ä¢ üî• –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories} –∫–∫–∞–ª\n"
        f"   ‚Ä¢ ü•ö –ë–µ–ª–∫–∏: {bju['protein']}–≥ | ü•ë –ñ–∏—Ä—ã: {bju['fat']}–≥ | üåæ –£–≥–ª–µ–≤–æ–¥—ã: {bju['carbs']}–≥\n"
        f"   ‚Ä¢ üíß –ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water['avg_water']} –º–ª/–¥–µ–Ω—å\n\n"
        "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:"
    )
    
    await update.message.reply_text(
        confirmation_text,
        reply_markup=create_confirmation_keyboard()
    )
    return CONFIRMATION

async def process_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    text = update.message.text
    
    if text == "‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ":
        user_data = context.user_data
        
        professor = NutritionProfessor()
        calories = professor.calculate_calories(user_data)
        bju = professor.calculate_bju(user_data, calories)
        water = professor.calculate_water_intake(int(user_data['weight']))
        
        package_selection_text = (
            "üì¶ –í–´–ë–ï–†–ò–¢–ï –ü–ê–ö–ï–¢ –£–°–õ–£–ì:\n\n"
            "üéØ **–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç** - 100‚ÇΩ\n"
            "‚Ä¢ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π\n"
            "‚Ä¢ –†–∞—Å—á–µ—Ç –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É\n\n"
            "üöÄ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç** - 200‚ÇΩ\n"  
            "‚Ä¢ –í—Å—ë –∏–∑ –ë–∞–∑–æ–≤–æ–≥–æ +\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π\n\n"
            "üëë **–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç** - 300‚ÇΩ\n"
            "‚Ä¢ –í—Å—ë –∏–∑ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ +\n"
            "‚Ä¢ –£–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º\n"
            "‚Ä¢ –ë–æ–Ω—É—Å: –≥–∞–π–¥ –ø–æ –ü–ü\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
        )
        
        await update.message.reply_text(
            package_selection_text,
            reply_markup=create_packages_keyboard()
        )
        return SELECT_PACKAGE
        
    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
        await update.message.reply_text(
            "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=create_edit_keyboard()
        )
        return EDIT_PARAMS
    
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return CONFIRMATION

async def process_edit_params(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    text = update.message.text
    
    edit_handlers = {
        "üéØ –¶–µ–ª—å": (GOAL, create_goal_keyboard(show_back=True), "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:"),
        "ü•ó –¢–∏–ø –¥–∏–µ—Ç—ã": (DIET, create_diet_keyboard(show_back=True), "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–µ—Ç—ã:"),
        "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏": (ALLERGIES, create_allergies_keyboard(show_back=True), "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏:"),
        "üë§ –ü–æ–ª": (GENDER, create_gender_keyboard(show_back=True), "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:"),
        "üéÇ –í–æ–∑—Ä–∞—Å—Ç": (AGE, ReplyKeyboardRemove(), "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:"),
        "üìè –†–æ—Å—Ç": (HEIGHT, ReplyKeyboardRemove(), "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç:"),
        "‚öñÔ∏è –í–µ—Å": (WEIGHT, ReplyKeyboardRemove(), "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å:"),
        "üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": (ACTIVITY, create_activity_keyboard(show_back=True), "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
    }
    
    if text in edit_handlers:
        next_state, keyboard, message = edit_handlers[text]
        await update.message.reply_text(message, reply_markup=keyboard)
        return next_state
    
    elif text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        professor = NutritionProfessor()
        calories = professor.calculate_calories(context.user_data)
        bju = professor.calculate_bju(context.user_data, calories)
        water = professor.calculate_water_intake(int(context.user_data['weight']))
        
        progress_text = get_progress_text(context.user_data)
        confirmation_text = (
            f"{progress_text}\n\n"
            "üìä –†–ê–°–ß–ï–¢–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
            f"   ‚Ä¢ üî• –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories} –∫–∫–∞–ª\n"
            f"   ‚Ä¢ ü•ö –ë–µ–ª–∫–∏: {bju['protein']}–≥ | ü•ë –ñ–∏—Ä—ã: {bju['fat']}–≥ | üåæ –£–≥–ª–µ–≤–æ–¥—ã: {bju['carbs']}–≥\n"
            f"   ‚Ä¢ üíß –ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water['avg_water']} –º–ª/–¥–µ–Ω—å\n\n"
            "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:"
        )
        
        await update.message.reply_text(
            confirmation_text,
            reply_markup=create_confirmation_keyboard()
        )
        return CONFIRMATION
    
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        return EDIT_PARAMS

async def process_package_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∫–µ—Ç–µ":
        return await show_confirmation(update, context)
    
    if text == "‚ùì –°—Ä–∞–≤–Ω–∏—Ç—å –ø–∞–∫–µ—Ç—ã":
        comparison_text = (
            "üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–ê–ö–ï–¢–û–í:\n\n"
            "üéØ –ë–ê–ó–û–í–´–ô (100‚ÇΩ):\n"
            "‚Ä¢ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π\n"
            "‚Ä¢ –†–∞—Å—á–µ—Ç –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É\n\n"
            "üöÄ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô (200‚ÇΩ):\n"
            "‚Ä¢ –í—Å—ë –∏–∑ –ë–∞–∑–æ–≤–æ–≥–æ +\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π\n\n"
            "üëë –ü–†–ï–ú–ò–£–ú (300‚ÇΩ):\n"
            "‚Ä¢ –í—Å—ë –∏–∑ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ +\n"
            "‚Ä¢ –£–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º\n"
            "‚Ä¢ –ë–æ–Ω—É—Å: –≥–∞–π–¥ –ø–æ –ü–ü"
        )
        await update.message.reply_text(comparison_text)
        return SELECT_PACKAGE
    
    package_map = {
        "üéØ –ë–∞–∑–æ–≤—ã–π - 100‚ÇΩ": "basic",
        "üöÄ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - 200‚ÇΩ": "standard", 
        "üëë –ü—Ä–µ–º–∏—É–º - 300‚ÇΩ": "premium"
    }
    
    if text in package_map:
        package_key = package_map[text]
        context.user_data['selected_package'] = package_key
        
        package = SERVICE_PACKAGES[package_key]
        
        package_info = (
            f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏: {package['name']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {package['price']}‚ÇΩ\n\n"
            f"üìã –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n"
        )
        
        for feature in package['features']:
            package_info += f"   ‚úÖ {feature}\n"
            
        package_info += f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        
        await update.message.reply_text(
            package_info,
            reply_markup=create_payment_keyboard()
        )
        return PAYMENT_METHOD
    
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
    return SELECT_PACKAGE

async def show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    professor = NutritionProfessor()
    calories = professor.calculate_calories(context.user_data)
    bju = professor.calculate_bju(context.user_data, calories)
    water = professor.calculate_water_intake(int(context.user_data['weight']))
    
    progress_text = get_progress_text(context.user_data)
    confirmation_text = (
        f"{progress_text}\n\n"
        "üìä –†–ê–°–ß–ï–¢–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
        f"   ‚Ä¢ üî• –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories} –∫–∫–∞–ª\n"
        f"   ‚Ä¢ ü•ö –ë–µ–ª–∫–∏: {bju['protein']}–≥ | ü•ë –ñ–∏—Ä—ã: {bju['fat']}–≥ | üåæ –£–≥–ª–µ–≤–æ–¥—ã: {bju['carbs']}–≥\n"
        f"   ‚Ä¢ üíß –ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water['avg_water']} –º–ª/–¥–µ–Ω—å\n\n"
        "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:"
    )
    
    await update.message.reply_text(
        confirmation_text,
        reply_markup=create_confirmation_keyboard()
    )

async def process_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    text = update.message.text
    
    if text == "‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç":
        return await show_package_selection(update, context)
    
    user_data = context.user_data
    user_id = update.effective_user.id
    
    user_data['user_name'] = update.effective_user.first_name
    user_data['user_id'] = user_id
    
    order_id = payment_manager.create_order(user_data, user_data['selected_package'])
    
    await admin_panel.notify_admin_new_order(order_id, user_data, context.bot)
    
    await update.message.reply_text(
        f"üéâ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n"
        f"üìã –í–∞—à –∑–∞–∫–∞–∑:\n"
        f"‚Ä¢ –ü–∞–∫–µ—Ç: {SERVICE_PACKAGES[user_data['selected_package']]['name']}\n"
        f"‚Ä¢ –°—É–º–º–∞: {SERVICE_PACKAGES[user_data['selected_package']]['price']}‚ÇΩ\n"
        f"‚Ä¢ –ù–æ–º–µ—Ä: #{order_id}\n\n"
        f"‚è± –°—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞: 24 —á–∞—Å–∞\n"
        f"üì¨ –ü–ª–∞–Ω –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n"
        f"üí° –ü–æ–∫–∞ –∂–¥–µ—Ç–µ, –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        f"üëâ @ppsupershef\n\n"
        f"–°—Ç–∞—Ç—É—Å: ‚ùå –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã",
        reply_markup=create_new_plan_keyboard()
    )
    
    context.user_data.clear()
    return ConversationHandler.END

async def show_package_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–æ–≤"""
    package_selection_text = (
        "üì¶ –í–´–ë–ï–†–ò–¢–ï –ü–ê–ö–ï–¢ –£–°–õ–£–ì:\n\n"
        "üéØ **–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç** - 100‚ÇΩ\n"
        "‚Ä¢ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π\n"
        "‚Ä¢ –†–∞—Å—á–µ—Ç –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—É\n\n"
        "üöÄ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç** - 200‚ÇΩ\n"  
        "‚Ä¢ –í—Å—ë –∏–∑ –ë–∞–∑–æ–≤–æ–≥–æ +\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π\n\n"
        "üëë **–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç** - 300‚ÇΩ\n"
        "‚Ä¢ –í—Å—ë –∏–∑ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ +\n"
        "‚Ä¢ –£–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º\n"
        "‚Ä¢ –ë–æ–Ω—É—Å: –≥–∞–π–¥ –ø–æ –ü–ü\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    )
    
    await update.message.reply_text(
        package_selection_text,
        reply_markup=create_packages_keyboard()
    )

async def handle_new_plan_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–≤—ã–π –ø–ª–∞–Ω"""
    text = update.message.text
    
    if text == "üÜï –ù–æ–≤—ã–π –ø–ª–∞–Ω":
        return await start(update, context)
    
    elif text == "üì¢ –ù–∞—à –∫–∞–Ω–∞–ª":
        await update.message.reply_text(
            "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:\n"
            "üëâ @ppsupershef\n\n"
            "–¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
            "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n"
            "‚Ä¢ –†–µ—Ü–µ–ø—Ç—ã –ü–ü\n" 
            "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
            reply_markup=create_new_plan_keyboard()
        )

async def handle_follow_up_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    text = update.message.text
    
    if text == "‚úÖ –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ":
        await update.message.reply_text(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥—ã, —á—Ç–æ –ø–ª–∞–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?",
            reply_markup=create_new_plan_keyboard()
        )
        
    elif text == "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã":
        await update.message.reply_text(
            "üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!",
            reply_markup=create_new_plan_keyboard()
        )
        
    elif text == "üîÑ –ù—É–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞":
        await update.message.reply_text(
            "üîÑ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–ª–∞–Ω–µ?\n\n"
            "–ú—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
            reply_markup=create_new_plan_keyboard()
        )

async def handle_knowledge_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    text = update.message.text
    
    if text == "üìö –ß—Ç–æ —Ç–∞–∫–æ–µ –ë–ñ–£?":
        await send_article(update, "bju")
    elif text == "üíß –í–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º":
        await send_article(update, "water")

async def send_article(update: Update, article_key: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    article = knowledge_base.articles.get(article_key)
    if article:
        await update.message.reply_text(
            article["content"],
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup([
                ["üìö –ß—Ç–æ —Ç–∞–∫–æ–µ –ë–ñ–£?", "üíß –í–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º"],
                ["üÜï –ù–æ–≤—ã–π –ø–ª–∞–Ω", "üì¢ –ù–∞—à –∫–∞–Ω–∞–ª"]
            ], resize_keyboard=True)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
async def handle_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    text = update.message.text
    
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        return
    
    if text.startswith('/confirm_'):
        order_id = text.replace('/confirm_', '')
        await confirm_payment(update, context, order_id)
    
    elif text.startswith('/send_'):
        order_id = text.replace('/send_', '')
        await send_plan_to_client(update, context, order_id)

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    order = payment_manager.pending_orders.get(order_id)
    if order:
        payment_manager.confirm_payment(order_id)
        
        await context.bot.send_message(
            chat_id=order['user_id'],
            text=(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –ø–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
                "‚è± –ü–ª–∞–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
                "üì¨ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n\n"
                "üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                "üëâ @ppsupershef"
            )
        )
        
        await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

async def send_plan_to_client(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    order = payment_manager.pending_orders.get(order_id)
    if not order:
        await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    files_info = [
        {
            'path': f"plans/{order_id}_plan.pdf",
            'filename': f"–ü–ª–∞–Ω_–ø–∏—Ç–∞–Ω–∏—è_{order_id}.pdf",
            'description': "üìÖ –í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π"
        },
        {
            'path': f"plans/{order_id}_recipes.pdf", 
            'filename': f"–†–µ—Ü–µ–ø—Ç—ã_{order_id}.pdf",
            'description': "üë®‚Äçüç≥ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤—Å–µ—Ö –±–ª—é–¥"
        }
    ]
    
    success = await admin_panel.send_plan_to_client(order_id, context.bot, files_info)
    
    if success:
        await update.message.reply_text(f"‚úÖ –ü–ª–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        await send_channel_notification(order_id, order['user_data'], context.bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        await reminder_system.schedule_follow_up(order['user_id'], context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        loyalty_system.add_week_plan(order['user_id'])
        await loyalty_system.offer_discount(order['user_id'], context.bot)
        
    else:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ ¬´üÜï –ù–æ–≤—ã–π –ø–ª–∞–Ω¬ª",
        reply_markup=create_new_plan_keyboard()
    )
    
    context.user_data.clear()
    return ConversationHandler.END

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, start)],
    states={
        SUBSCRIPTION_CHECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_subscription_check)],
        GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_goal)],
        DIET: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_diet)],
        ALLERGIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_allergies)],
        GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_gender)],
        AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_age)],
        HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_height)],
        WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_weight)],
        ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_activity)],
        CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_confirmation)],
        EDIT_PARAMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_edit_params)],
        SELECT_PACKAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_package_selection)],
        PAYMENT_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_payment_method)],
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)

application.add_handler(conv_handler)
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_plan_request))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_follow_up_response))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_knowledge_request))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_command))

def run_polling():
    """–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ polling"""
    print("üîç –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling()

if __name__ == '__main__':
    run_polling()
